import numpy as np
import matplotlib.pyplot as plt

v_ini = np.array([50,10,5]) 
g1=0.8
g2=-0.9
g3=-0.65
d12=-0.04
d13=-0.04
d21=0.04
d23=-0.02
d31=0.02
d32=0.04

def derivee_v(v, t):
    v=np.array([g1*v[0]+d12*v[0]*v[1]+d13*v[0]*v[2],
               d21*v[1]*v[0]+g2*v[1]+d23*v[1]*v[2],
               d31*v[2]*v[0]+d32*v[2]*v[1]+g3*v[2]])
    return v

def Euler(start, end, step, v_ini, derivee):
    interval = end - start                     # Intervalle
    num_points = int(interval / step) + 1      # Nombre d'éléments
    t = np.linspace(start, end, num_points)    # Tableau temps t

    v = np.empty((3, num_points))
    v[:,0] = v_ini

    for i in range(num_points - 1):
        v[:, i + 1] = v[:, i] + step * derivee(v[:, i], t[i])

    return t, v


def rk2(start, end, step, v_ini, derivee, ordre):
    interval = end - start                     # Intervalle
    num_points = int(interval / step) + 1      # Nombre d'éléments
    t = np.linspace(start, end, num_points)    # Tableau temps t

    v = np.empty((3, num_points))
    v[:,0]=v_ini

    for i in range(num_points - 1):
        d1 = derivee(v[:, i], t[i])
        v1 = v[:, i] + step / 2 * d1
        d2 = derivee(v1, t[i] + step / 2)
        v[:, i + 1] = v1 + step / 2 * d2

    return t, v


def rk4(start, end, step, v_ini, derivee, ordre):
    interval = end - start                     # Intervalle
    num_points = int(interval / step) + 1      # Nombre d'éléments
    t = np.linspace(start, end, num_points)    # Tableau temps t

    v = np.empty((3, num_points))
    v[:,0] = v_ini

    for i in range(num_points - 1):
        d1 = derivee(v[:, i], t[i])
        d2 = derivee(v[:, i] + step / 2 * d1, t[i] + step / 2)
        d3 = derivee(v[:, i] + step / 2 * d2, t[i] + step / 2)
        d4 = derivee(v[:, i] + step * d3, t[i] + step)
        v[:, i + 1] = v[:, i] + step / 6 * (d1 + 2 * d2 + 2 * d3 + d4)

    return t, v

ti=0
te=300
step=0.02
ordre=1

t, v = Euler(ti, te, step, v_ini, derivee_v)
t, Drk2 = rk2(ti, te, step, v_ini, derivee_v, ordre)
t, Drk4 = rk4(ti, te,step, v_ini, derivee_v, ordre)


plt.plot(t,v[0],color="blue", label="Euler")
plt.plot(t, Drk2[0, :],color="green", label="RK2")
plt.plot(t, Drk4[0, :],color="red", label="RK4")
plt.legend()
plt.xlabel('Temps [années]')
plt.ylabel('Population des proies')
plt.title("Evolution de la population des proies à travers différentes méthodes de résolution")
plt.grid()
plt.show()


plt.plot(t,v[1],color="blue", label="Euler")
plt.plot(t, Drk2[1, :],color="green", label="RK2")
plt.plot(t, Drk4[1, :],color="red", label="RK4")
plt.legend()
plt.xlabel('Temps [années]')
plt.ylabel('Population des pr&dateurs faibles')
plt.title("Evolution de la population des prédateurs faibles à travers différentes méthodes de résolution")
plt.grid()
plt.show()

plt.plot(t,v[2],color="blue", label="Euler")
plt.plot(t, Drk2[2, :],color="green", label="RK2")
plt.plot(t, Drk4[2, :],color="red", label="RK4")
plt.legend()
plt.xlabel('Temps [années]')
plt.ylabel('Population des proies')
plt.title("Evolution de la population des prédateurs forts à travers différentes méthodes de résolution")
plt.grid()
plt.show()


fig = plt.figure()
ax = fig.gca(projection='3d')  # Affichage en 3D
ax.plot(v[0],v[1],v[2],color='red')
plt.title("Courbe 3D")
ax.set_xlabel('Proie')
ax.set_ylabel('Prédateur faible')
ax.set_zlabel('Prédateur fort')
plt.tight_layout()
plt.show()
